{"version":3,"sources":["app.js","services/text.js","utils/helpers.js","utils/constants.js","components/title/index.js","components/footer/index.js","components/stats/index.js","components/prompt/index.js","components/progress-ring/index.js","index.js"],"names":["typingInterval","timeAtStart","filteredQuotes","quotes","filter","text","length","getCharByCode","charCode","String","fromCharCode","getInitialGameState","Math","floor","random","author","typingPrompt","correctEntries","incorrectEntries","isCorrectSequence","keyStrokeCount","typingPromptLength","getElapsedTime","start","Date","Title","className","icon","faKeyboard","Footer","href","faGithub","faHeart","Stats","wpm","accuracy","isFinished","hasStartedTyping","Prompt","highlightClass","map","correctEntry","index","key","incorrectEntry","ProgressRing","radius","stroke","progress","normalizedRadius","circumference","PI","strokeDashoffset","getStroke","Fragment","height","width","fill","strokeWidth","strokeDasharray","style","r","cx","cy","faCheck","faBolt","color","App","typingArea","useRef","useState","gameState","setGameState","timeElapsedInMs","setTimeElapsedInMs","setHasStartedTyping","setIsFinished","useEffect","setInterval","newTimeElapsedInMs","clearInterval","correctEntriesCount","timeElapsedInMin","toFixed","isFinite","getStats","getProgress","getHighlightClass","onClick","current","focus","ref","onKeyPress","isUnusedKeyPress","charCodeAt","substring","onKeyDown","keyCode","hasIncorrectEntries","hasCorrectEntries","slice","updatedCorrectEntries","updatedTypingPrompt","join","handleCorrectEntries","type","autoFocus","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a936b443.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./app.css\";\nimport {\n  TWO_MINUTES,\n  ONE_SECOND,\n  KEYCODE_BACKSPACE,\n  PROGRESS_RING_RADIUS,\n  PROGRESS_RING_STROKE,\n  KEYCODE_ENTER,\n} from \"./utils/constants\";\nimport {\n  getStats,\n  getHighlightClass,\n  getCharByCode,\n  getProgress,\n  getInitialGameState,\n  isUnusedKeyPress,\n  getElapsedTime,\n} from \"./utils/helpers\";\n\nimport Title from \"./components/title\";\nimport Footer from \"./components/footer\";\nimport Stats from \"./components/stats\";\nimport Prompt from \"./components/prompt\";\nimport ProgressRing from \"./components/progress-ring\";\n\nlet typingInterval;\nlet timeAtStart;\n\nfunction App() {\n  const typingArea = useRef(null);\n  const [gameState, setGameState] = useState(getInitialGameState());\n  const [timeElapsedInMs, setTimeElapsedInMs] = useState(0);\n  const [hasStartedTyping, setHasStartedTyping] = useState(false);\n  const [isFinished, setIsFinished] = useState(false);\n\n  useEffect(() => {\n    if (hasStartedTyping && !isFinished) {\n      timeAtStart = new Date();\n\n      typingInterval = setInterval(() => {\n        const newTimeElapsedInMs = getElapsedTime(timeAtStart);\n\n        if (newTimeElapsedInMs >= TWO_MINUTES) {\n          clearInterval(typingInterval);\n          setIsFinished(true);\n        } else {\n          setTimeElapsedInMs(newTimeElapsedInMs);\n        }\n      }, ONE_SECOND);\n    }\n\n    return () => {\n      clearInterval(typingInterval);\n    };\n  }, [isFinished, hasStartedTyping]);\n\n  const {\n    typingPrompt,\n    correctEntries,\n    incorrectEntries,\n    isCorrectSequence,\n    keyStrokeCount,\n    author,\n  } = gameState;\n\n  const { wpm, accuracy } = getStats({\n    timeElapsedInMs,\n    correctEntries,\n    incorrectEntries,\n    keyStrokeCount,\n  });\n\n  const progress = getProgress({ timeElapsedInMs, isFinished });\n\n  const highlightClass = getHighlightClass({ isCorrectSequence, isFinished });\n\n  const handleOnKeyPress = ({ charCode }) => {\n    setTimeElapsedInMs(getElapsedTime(timeAtStart));\n\n    if (isUnusedKeyPress({ charCode, isFinished })) {\n      return;\n    }\n\n    if (isFinished) {\n      if (charCode === KEYCODE_ENTER) {\n        setGameState(getInitialGameState());\n        setIsFinished(false);\n        setTimeElapsedInMs(0);\n        setHasStartedTyping(false);\n      }\n      return;\n    }\n\n    if (!hasStartedTyping) {\n      if (charCode === typingPrompt.charCodeAt(0)) {\n        setHasStartedTyping(true);\n      }\n    }\n\n    if (charCode === typingPrompt.charCodeAt(0) && isCorrectSequence) {\n      setGameState({\n        ...gameState,\n        correctEntries: [...correctEntries, typingPrompt[0]],\n        typingPrompt: typingPrompt.substring(1),\n        isCorrectSequence: true,\n        keyStrokeCount: keyStrokeCount + 1,\n      });\n\n      if (typingPrompt.substring(1).length < 1) {\n        clearInterval(typingInterval);\n        setIsFinished(true);\n      }\n    } else {\n      setGameState({\n        ...gameState,\n        incorrectEntries: [...incorrectEntries, getCharByCode(charCode)],\n        isCorrectSequence: false,\n        keyStrokeCount: keyStrokeCount + 1,\n      });\n    }\n  };\n\n  const handleOnKeyDown = ({ keyCode }) => {\n    if (isFinished) {\n      return;\n    }\n\n    const handleHasIncorrectEntries = () => {\n      setGameState({\n        ...gameState,\n        incorrectEntries:\n          incorrectEntries.length > 0\n            ? incorrectEntries.slice(0, -1)\n            : incorrectEntries,\n        isCorrectSequence: incorrectEntries.length <= 1,\n      });\n    };\n\n    const handleCorrectEntries = () => {\n      const updatedCorrectEntries = correctEntries.slice(0, -1);\n      const updatedTypingPrompt = [\n        correctEntries[correctEntries.length - 1],\n        ...typingPrompt,\n      ].join(\"\");\n\n      setGameState({\n        ...gameState,\n        correctEntries: updatedCorrectEntries,\n        typingPrompt: updatedTypingPrompt,\n      });\n    };\n\n    if (keyCode === KEYCODE_BACKSPACE) {\n      const hasIncorrectEntries = incorrectEntries.length > 0;\n      const hasCorrectEntries = correctEntries.length > 0;\n\n      if (hasIncorrectEntries) {\n        handleHasIncorrectEntries();\n      } else if (hasCorrectEntries) {\n        handleCorrectEntries();\n      }\n    }\n  };\n\n  const handleClick = () => {\n    typingArea.current.focus();\n  };\n\n  return (\n    <div onClick={handleClick} className=\"app\">\n      <input\n        ref={typingArea}\n        className=\"typing-area\"\n        onKeyPress={handleOnKeyPress}\n        onKeyDown={handleOnKeyDown}\n        type=\"text\"\n        autoFocus\n      />\n      <div className=\"app-container\">\n        <Title />\n        <Prompt\n          correctEntries={correctEntries}\n          typingPrompt={typingPrompt}\n          incorrectEntries={incorrectEntries}\n          highlightClass={highlightClass}\n          hasStartedTyping={hasStartedTyping}\n          author={author}\n          isFinished={isFinished}\n        />\n        <div className=\"row\">\n          <div className=\"column mt-10-negative\">\n            <ProgressRing\n              hasStartedTyping={hasStartedTyping}\n              isFinished={isFinished}\n              stroke={PROGRESS_RING_STROKE}\n              radius={PROGRESS_RING_RADIUS}\n              progress={progress}\n            />\n          </div>\n          <div className=\"column\">\n            <Stats\n              hasStartedTyping={hasStartedTyping}\n              isFinished={isFinished}\n              wpm={wpm}\n              accuracy={accuracy}\n            />\n          </div>\n        </div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/*\n    Quotes from: https://type.fit/api/quotes\n*/\n\nimport quotes from \"./data/quotes.json\";\n\nconst MINIMUM_LETTER_COUNT = 50;\n\nconst filteredQuotes = quotes.filter(({ text }) => {\n  return text.length >= MINIMUM_LETTER_COUNT;\n});\n\nexport const getText = () => {\n  return filteredQuotes[Math.floor(Math.random() * filteredQuotes.length)];\n};\n","import {\n  ONE_MINUTE,\n  TWO_MINUTES,\n  APPROX_WORD_LENGTH,\n  KEYCODE_SPACEBAR,\n  KEYCODE_ENTER,\n} from \"./constants\";\n\nimport { getText } from \"../services/text\";\n\nexport const getStats = ({\n  timeElapsedInMs,\n  correctEntries,\n  incorrectEntries,\n  keyStrokeCount,\n}) => {\n  const correctEntriesCount = correctEntries.length;\n  const incorrectEntriesCount = incorrectEntries.length;\n  const timeElapsedInMin = timeElapsedInMs / ONE_MINUTE;\n\n  const grossWpm = keyStrokeCount / APPROX_WORD_LENGTH / timeElapsedInMin;\n\n  const wpm = (grossWpm - incorrectEntriesCount / timeElapsedInMin).toFixed();\n  const accuracy = ((correctEntriesCount / keyStrokeCount) * 100).toFixed();\n\n  return {\n    wpm: isFinite(wpm) && wpm > 0 ? wpm : null,\n    accuracy: isFinite(accuracy) ? accuracy : null,\n  };\n};\n\nexport const getHighlightClass = ({ isCorrectSequence, isFinished }) => {\n  if (isFinished) {\n    return \"highlight-finished\";\n  }\n\n  if (isCorrectSequence) {\n    return \"highlight-correct\";\n  }\n\n  return \"highlight-warning\";\n};\n\nexport const getCharByCode = (charCode) => {\n  if (charCode === KEYCODE_SPACEBAR) {\n    return \"_\";\n  }\n  return String.fromCharCode(charCode);\n};\n\nexport const getProgress = ({ timeElapsedInMs, isFinished }) => {\n  if (isFinished) {\n    return 100;\n  }\n\n  return 100 - ((timeElapsedInMs / TWO_MINUTES) * 100).toFixed();\n};\n\nexport const isUnusedKeyPress = ({ charCode, isFinished }) => {\n  if (charCode === KEYCODE_ENTER && !isFinished) {\n    return true;\n  }\n  return false;\n};\n\nexport const getInitialGameState = () => {\n  const { text, author } = getText();\n\n  const initialGameState = {\n    typingPrompt: text,\n    correctEntries: [],\n    incorrectEntries: [],\n    isCorrectSequence: true,\n    keyStrokeCount: 0,\n    typingPromptLength: text.length,\n    author,\n  };\n\n  return initialGameState;\n};\n\nexport const getElapsedTime = (start) => {\n  return new Date() - start;\n};\n","export const ONE_SECOND = 1000;\nexport const ONE_MINUTE = 60000;\nexport const TWO_MINUTES = 120000;\nexport const KEYCODE_BACKSPACE = 8;\nexport const APPROX_WORD_LENGTH = 5;\nexport const KEYCODE_SPACEBAR = 32;\nexport const KEYCODE_ENTER = 13;\nexport const PROGRESS_RING_RADIUS = 60;\nexport const PROGRESS_RING_STROKE = 4;\n","import React from \"react\";\nimport \"./index.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faKeyboard } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Title = () => {\n  return (\n    <div className=\"page-title\">\n      <FontAwesomeIcon icon={faKeyboard} /> Typing{\" \"}\n      <span className=\"page-title-bold\">Test</span>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\nimport \"./index.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Footer = () => {\n  return (\n    <div className=\"page-footer\">\n      <a href=\"https://github.com/nafeu/typing-test\">\n        <FontAwesomeIcon icon={faGithub} />\n      </a>{\" \"}\n      / Made with <FontAwesomeIcon icon={faHeart} /> by{\" \"}\n      <a href=\"http://nafeu.com\">Nafeu Nasir.</a>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport \"./index.css\";\n\nconst Stats = ({ wpm, accuracy, isFinished, hasStartedTyping }) => {\n  const getStatsClass = () => {\n    if (isFinished) {\n      return \"typing-stats-finished\";\n    }\n\n    if (hasStartedTyping) {\n      return \"typing-stats-in-progress\";\n    }\n\n    return \"typing-stats-standby\";\n  };\n\n  return (\n    <div className={`typing-stats ${getStatsClass()}`}>\n      <div className=\"typing-stats-wpm\">\n        <div className=\"typing-stats-value\">{wpm ? wpm : \"-\"}</div>\n        <div className=\"typing-stats-label\">Words Per Minute</div>\n      </div>\n      <div className=\"typing-stats-accuracy\">\n        <div className=\"typing-stats-value\">{accuracy ? accuracy : \"-\"}</div>\n        <div className=\"typing-stats-label\">Accuracy</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Stats;\n","import React from \"react\";\nimport \"./index.css\";\n\nconst Prompt = ({\n  correctEntries,\n  typingPrompt,\n  incorrectEntries,\n  highlightClass,\n  hasStartedTyping,\n  author,\n  isFinished,\n}) => {\n  return (\n    <div className=\"typing-prompt\">\n      <div className=\"correct-entries\">\n        <div\n          className={`typing-prompt-notice ${\n            hasStartedTyping && !isFinished ? \"hide\" : \"\"\n          }`}\n        >\n          {\" \"}\n          {isFinished\n            ? \"Press enter to start another test.\"\n            : \"Type the following:\"}\n        </div>\n        {correctEntries.map((correctEntry, index) => {\n          return (\n            <span key={`${correctEntry}-${index}`} className={highlightClass}>\n              {correctEntry}\n            </span>\n          );\n        })}\n        {incorrectEntries.length > 0 &&\n          incorrectEntries.map((incorrectEntry, index) => {\n            return (\n              <span\n                key={`${incorrectEntry}-${index}`}\n                className={`highlight-incorrect ${\n                  incorrectEntry === \"_\" ? \"is-underline\" : \"\"\n                }`}\n              >\n                {incorrectEntry}\n              </span>\n            );\n          })}\n        {typingPrompt}\n        <div className=\"typing-prompt-author\">{author}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Prompt;\n","import React from \"react\";\nimport \"./index.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faBolt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ONE_HUNDRED = 100;\nconst TWO = 2;\n\nconst ProgressRing = ({\n  radius,\n  stroke,\n  progress,\n  hasStartedTyping,\n  isFinished,\n}) => {\n  const normalizedRadius = radius - stroke * TWO;\n  const circumference = normalizedRadius * TWO * Math.PI;\n\n  const strokeDashoffset =\n    circumference - (progress / ONE_HUNDRED) * circumference;\n\n  const getStroke = () => {\n    if (isFinished) {\n      return \"#01a3a4\";\n    }\n\n    if (hasStartedTyping) {\n      return \"#5f27cd\";\n    }\n\n    return \"#e9eaeb\";\n  };\n\n  return (\n    <React.Fragment>\n      <svg className=\"progress-ring\" height={radius * TWO} width={radius * TWO}>\n        <circle\n          stroke={getStroke()}\n          fill=\"transparent\"\n          strokeWidth={stroke}\n          strokeDasharray={circumference + \" \" + circumference}\n          style={{\n            strokeDashoffset: strokeDashoffset ? strokeDashoffset : 0,\n          }}\n          r={normalizedRadius}\n          cx={radius}\n          cy={radius}\n        />\n      </svg>\n      <div className=\"progress-check\">\n        <FontAwesomeIcon\n          icon={isFinished ? faCheck : faBolt}\n          color={getStroke()}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ProgressRing;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"typeface-roboto-mono\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}